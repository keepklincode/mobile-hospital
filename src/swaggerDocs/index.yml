paths:
  /signup: # path of the collection from your endpoint
    post: # endpoint request type (post request)
      tags: # Tag property
        - Authentication # Value of the tag
      summary: Registration end-point
      produces:
        - application/json
      parameters:
        - in: body
          name: User registrastion
          description: User registration
          required: true
          schema: # Schema definition
            $ref: "#/definitions/userRegistration"
      responses: # server responses
        200:
          description: should return successful

  # User sign-in
  /signin:
    post:
      tags:
        - Authentication
      summary: Logging in end-point
      produces:
        - application/json
      parameters:
        - in: body
          name: User login
          description: User login end-point
          required: true
          schema:
            $ref: "#/definitions/userLogin"
      responses:
        200:
          description: should return successful

  # unboarding of user
  /onboarding:
    post:
      tags:
        - Authentication
      summary: Unboarding of a user
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: access token
          default: serial eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfdXNlclR5cGUiOiJzY2hvb2wiLCJfZW1haWwiOiJzcGNzQGdtYWlsLmNvbSIsImlhdCI6MTY0Nzk3NTk5NiwiZXhwIjoxNjQ3OTkzOTk2fQ.c-p5B34vPn6jYgtKNOF88eGy3AwkOQXPmFhfIW9ZU8w
          required: true
        - in: body
          name: User unboarding
          description: Unboarding end-point
          required: true
          schema:
            $ref: "#/definitions/onboarding"
      responses:
        200:
          description: should return successful

  # fetching user data
  /userData:
    get:
      tags:
        - Authentication
      summary: Getting User data
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: token
          default: serial eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfdXNlclR5cGUiOiJzY2hvb2wiLCJfZW1haWwiOiJzcGNzQGdtYWlsLmNvbSIsImlhdCI6MTY0Nzk3NTk5NiwiZXhwIjoxNjQ3OTkzOTk2fQ.c-p5B34vPn6jYgtKNOF88eGy3AwkOQXPmFhfIW9ZU8w
          required: true
      responses:
        200:
          description: should return successful

  # Updating a user
  /updateUser:
    put:
      tags:
        - Authentication
      summary: User update end-point
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: access token
          default: serial eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfdXNlclR5cGUiOiJzY2hvb2wiLCJfZW1haWwiOiJzcGNzQGdtYWlsLmNvbSIsImlhdCI6MTY0Nzk3NTk5NiwiZXhwIjoxNjQ3OTkzOTk2fQ.c-p5B34vPn6jYgtKNOF88eGy3AwkOQXPmFhfIW9ZU8w
          required: true
        - in: body
          name: User-update
          description: User update
          required: true
          schema: # Schema definition
            $ref: "#/definitions/updateUser"
      responses: # server responses
        200:
          description: should return successful

  # fetching user data
  /deleteUser:
    delete:
      tags:
        - Authentication
      summary: Deleting a user
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: token
          default: serial eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfdXNlclR5cGUiOiJzY2hvb2wiLCJfZW1haWwiOiJzcGNzQGdtYWlsLmNvbSIsImlhdCI6MTY0Nzk3NTk5NiwiZXhwIjoxNjQ3OTkzOTk2fQ.c-p5B34vPn6jYgtKNOF88eGy3AwkOQXPmFhfIW9ZU8w
          required: true
      responses:
        200:
          description: should return successful

  /getAllUser:
    get:
      tags:
        - Authentication
      summary: Geting a user
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: token
          default: 
          required: true
      responses:
        200:
          description: should return successful

  # Creating appointment
  /appointment:
    post:
      tags:
        - Appointment
      summary: Create appointment
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: access token
          default:
          required: true
        - in: body
          name: Create appointment
          description: User Appointment
          required: true
          schema: # Schema definition
            $ref: "#/definitions/appointment"
      responses: # server responses
        200:
          description: should return successful
    
     # Checking appointment
  /checkAppointmentVacancy:
    get: # endpoint request type (post request)
      tags: # Tag property
        - Appointment # Value of the tag
      summary: Checking available time
      produces:
        - application/json
      parameters: # request parameters
        - in: header
          name: authorization
          description: access token
          default: 
          required: true
        - name: doctorsId # name of parameter passed
          in: query # parameters in the path
          required: true 
          default: 1
          type: string
        - name: appointmentDate # name of parameter passed
          in: query # parameters in the path
          required: true
          default: 
          type: string
        - name: appointmentStartTime # name of parameter passed
          in: query # parameters in the path
          required: true
          default: 
          type: string
        - name: appointmentEndTime # name of parameter passed
          in: query # parameters in the path
          required: true
          default: 
          type: string

      responses: # server responses
        201:
          description: node starter project

  

  # Doctor Rating
  /ratedoctor:
    post:
      tags:
        - Authentication
      summary: Doctor's rating performance
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: access token
          default: 
          required: true
        - in: body
          name: Rating doctor
          description: Rating doctor's performance
          required: true
          schema: # Schema definition
            $ref: "#/definitions/ratedoctor"
      responses: # server responses
        200:
          description: should return successful

  # GetAvailableDotors route
  /getAvailableDoctors:
    get:
      tags:
        - Appointment
      summary: Geting all available doctors
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: token
          default: 
          required: true
      responses:
        200:
          description: should return successful

  /bookedAppointment:
    get:
      tags:
        - Appointment
      summary: Getting Booked appointment
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: token
          default: 
          required: true
      responses:
        200:
          description: should return successful


  # Creating Doctors record
  /doctorsSignup: # path of the collection from your endpoint
    post: # endpoint request type (post request)
      tags: # Tag property
        - Doctors Authentication # Value of the tag
      summary: Registration end-point
      produces:
        - application/json
      parameters:
        - in: body
          name: Doctor registrastion
          description: Doctors registration
          required: true
          schema: # Schema definition
            $ref: "#/definitions/doctorsRegistration"
      responses: # server responses
        200:
          description: should return successful

  /doctorsSignin:
    post:
      tags:
        - Doctors Authentication
      summary: Doctors login
      produces:
        - application/json
      parameters:
        - in: body
          name: Doctors login
          description: Doctors login end-point
          required: true
          schema:
            $ref: "#/definitions/doctorsSignin"
      responses:
        200:
          description: should return successful


  /getAllDoctors:
    get:
      tags:
        - Doctors Authentication
      summary: Geting a user
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: token
          default: 
          required: true
      responses:
        200:
          description: should return successful


  # Fetching Doctors data
  /doctorsData:
    get:
      tags:
        - Doctors Authentication
      summary: Getting Doctors data
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: token
          default:
          required: true
      responses:
        200:
          description: should return successful

  # Updating Doctors record
  /doctorsUpdate:
    put:
      tags:
        - Doctors Authentication
      summary: Doctors update end-point
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: access token
          default:
          required: true
        - in: body
          name: Doctors-update
          description: Doctors update
          required: true
          schema: # Schema definition
            $ref: "#/definitions/doctorsUpdate"
      responses: # server responses
        200:
          description: should return successful

  # Deleting doctors  record
  /doctorsDelete:
    delete:
      tags:
        - Doctors Authentication
      summary: Deleting Doctors data
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: token
          default:
          required: true
      responses:
        200:
          description: should return successful

  /available: # path of the collection from your endpoint
    post:
      tags:
        - Availability
      summary: Available doctor
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: access token
          default:
          required: true
        - in: body
          name: check available
          description: Availability End-point
          required: true
          schema: # Schema definition
            $ref: "#/definitions/available"
      responses: # server responses
        200:
          description: should return successful

definitions: # Schema definition for request body
  userRegistration:
    type: object
    properties:
      name:
        type: String
        default: "Risper Koome"
      phone:
        type: Number
        default: +2348055296566
      email:
        type: String
        default: test@gmail.com
      dob:
        type: String
        default: "20/11/2000"
      password:
        type: String
        default: "save"
      passwordConfirm:
        type: String
        default: "save"

  userLogin:
    type: object
    properties:
      email:
        type: String
        default: "test@gmail.com"
      password:
        type: String
        default: "save"

  onboarding:
    type: object
    properties:
      gender:
        type: String
        default: "male"
      patientId:
        type: Number
        default: 12345

  updateUser:
    type: object
    properties:
      Name:
        type: String
        default: "Risper Koome"
      Phone:
        type: Number
        default: +2348055296566
      Email:
        type: String
        default: test@gmail.com
      PatientId:
        type: Number
        default: 12345

  # Appointment definition
  appointment:
    type: object
    properties:
      doctorsId:
        type: String
        default: ""
      appointmentDate:
        type: Date
        default: "2023-09-11"
      appointmentStartTime:
        type: String
        default: ""
      appointmentEndTime:
        type: String
        default: ""
  # Doctor's rating
  ratedoctor:
    type: object
    properties:
      doctorId:
        type: String
        default: ""
      rating:
        type: Number
        default: ""

  # Doctor Definition
  doctorsRegistration:
    type: object
    properties:
      name:
        type: String
        default: "Chibuike N"
      phone:
        type: Number
        default: +2348055296566
      email:
        type: String
        default: doctor@gmail.com
      profession:
        type: String
        default: General Practitioner
      gender:
        type: String
        default: "M"
      password:
        type: String
        default: "save"
      passwordConfirm:
        type: String
        default: "save"

  doctorsSignin:
    type: object
    properties:
      email:
        type: String
        default: "doctor@gmail.com"
      password:
        type: String
        default: "save"

  doctorsUpdate:
    type: object
    properties:
      Name:
        type: String
        default: "Risper Koome"
      Phone:
        type: Number
        default: +2348055296566
      Email:
        type: String
        default: test@gmail.com

  available:
    type: object
    properties:
      availableDate:
        type: Date
        default: "2023-08-11"
      availableStartTime:
        type: String
        default: ""
      availableEndTime:
        type: String
        default: ""

  # checkAppointmentVacancy:
  #   type: object
  #   properties:
  #     doctorsId:
  #       type: String
  #       default: ""
  #     appointmentDate:
  #       type: Date
  #       default: "2023-09-11"
  #     appointmentStartTime:
  #       type: String
  #       default: ""
  #     appointmentEndTime:
  #       type: String
  #       default: ""